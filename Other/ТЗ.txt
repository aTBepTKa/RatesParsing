Задача: необходимо написать софт для парсинга курсов валют с сайтов банков. Ну или цен на резиновые хуи на бирже резиновых хуёв. Задача для обучения, поэтому похуй что парсить.

Упрощенно парсинг представляет из себя скачивание html-страницы, получение нужных значений с помощью CSS-селекторов или XPath, и сохранение полученных результатов.
Разметка сторонних сайтов меняется чаще, чем Макс ебет новых продавщиц. Если алгоритм парсинга для каждого банка будет зашит прямо в коде твоей программы, ты, мой друг, заебешься её поддерживать. Цель - сделать ПО которое не приходилось бы дорабатывать когда у ебучего банка Кыргызстана изменилась разметка, либо надо добавить новый банк. 
Этого можно достичь если писать алгоритмы парсинга не на языке программирования, а в каком-то другом формате, например JSON, на языке интуитивно понятном пацанчику с района.
Тогда поддержку парсинга можно будет спихнуть на "не программистов" (техподдержку), и тебе не будут прилетать задачи типа "СРОЧНА ВАЖНА ОТСУТСВУЮТ КУРСЫ НА 31 ФЕВРАЛЯ". А в освободившееся время ты сможешь зырить на ютубе как Епифанцев зырит на ютубе как собака ебет гуся.

JSON-сценарий представляет из себя набор команд, выполнение которых даст желаемый результат.
Например: 
1. Команда "GetContent" - скачать веб-страницу по указанному адресу (GET или POST запрос).
2. Команда "GetByXPath" - выдрать строку из страницы по указанному XPath-адресу.
3. Команда "ReplaceString" - в указанной строке заменить одни символы на другие. Например для удаления лишнего текста который нам не нужен.
4. Команда "SetResult" - поместить результат в ответ.
То что я описал называется DSL (Domain Specific Language). Ты изобретаешь его сам. Т.е. создаешь классы таких команд, которые тебе нужны.

Сделаем 2 приложения. Пишем на .NET Core 2.2 или 3.0.

Первое представляет из себя Console Application, которое потом будет хостится как шindows-служба. Все что она должна уметь делать - получить сценарий, последовательно выполнить команды и вернуть результат.

Второе будет ASP.NET Core MVC приложение.
У него будет своя база данных в SQL Server. Для работы с БД используем Entity Framework Core.
В базе д.б. таблица в которой хранятся сценарии парсинга.
Примерная модель задания:

        /// <summary>
        /// Идентефикатор задания.
        /// </summary>
        public int Id { get; set; }

	/// <summary>
        /// Название задания.
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// Команды сценария описанные в формате JSON.
        /// </summary>
        public string Scenario { get; set; }

        /// <summary>
        /// Время запуска задания.
        /// </summary>
        public TimeSpan ParseTime { get; set; }	
	
        /// <summary>
        /// Описание ошибки если задание завершилось неудачно.
        /// </summary>
        public string LastErrorDescription { get; set; }
	
И таблица в которой будут сохраняться резульаты парсинга, если он прошел успешно. Например,
ExchangeRates:
		 public int Id { get; set; }
		 public string BankName { get; set; }
		 public DateTime Date { get; set; }
		 public string BaseCurrency { get; set; }
		 public string QuoteCurrency { get; set; }
		 public decimal Rate { get; set; }
		 
Делаем интерфейс для CRUD-операций с заданиями парсинга.
В приложении работает фоновый процесс, который по расписанию отправляет первому сервису сценарии на парсинг, получает результат и сохраняет в БД.
Также должна быть возможность запустить парсинг по кнопке.
Если парсинг завершился не успешно вывести ошибку.

Между собой приложения должны общаться через шину RabbitMq.	
Для работы с шиной используем фреймворк MassTransit.
Для интерфейсов сделаем отдельную библиотеку на .NET Standart 2.0. В ней будет тупо по 2 интерфейса IParsingRequest и IParsingResponse.
Есть 3 типа общения по шине:
1) Publish (Fire and forget)
2) Publish-Respond
3) Request-Response
Нам подойдет 3-й (работает аналогично WCF или HTTP клиентам).

Оснащение:
1) Установить Erlang
2) Поднять сервер RabbitMq
3) Включить плагин Managment UI для RabbitMq (GUI для сервера понадобится)
4) Поднять SQL Server 2014/2016/2017
5) Visual Studio 2019
6) .NET Core SDK v2.2 или 3.0.

Теоретическая подготовка:
1) Почитать про шины (брокеры сообщений) чтобы понимать в целом что это.
2) Почитать про RabbitMq.
3) Изучить документацию MassTransit. Разобраться как происходит подключение, отправка и получение сообщений.